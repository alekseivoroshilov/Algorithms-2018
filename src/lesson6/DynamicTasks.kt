@file:Suppress("UNUSED_PARAMETER")

package lesson6

import java.io.File

/**
 * Наибольшая общая подпоследовательность.
 * Средняя
 *
 * Дано две строки, например "nematode knowledge" и "empty bottle".
 * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
 * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
 * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
 * Если общей подпоследовательности нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 */
fun longestCommonSubSequence(first: String, second: String): String {
    TODO()
}

/**
 * Наибольшая возрастающая подпоследовательность
 * Средняя
 *
 * Дан список целых чисел, например, [2 8 5 9 12 6].
 * Найти в нём самую длинную возрастающую подпоследовательность.
 * Элементы подпоследовательности не обязаны идти подряд,
 * но должны быть расположены в исходном списке в том же порядке.
 * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
 * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
 * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
 */
fun longestIncreasingSubSequence(list: List<Int>): List<Int> {
    TODO()
}

/**
 * Самый короткий маршрут на прямоугольном поле.
 * Сложная
 *
 * В файле с именем inputName задано прямоугольное поле:
 *
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
 *
 * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
 * В каждой клетке записано некоторое натуральное число или нуль.
 * Необходимо попасть из верхней левой клетки в правую нижнюю.
 * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
 * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
 *
 * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
 */
//По условиям задачи в 5ом уроке, одна задача может быть зачтена в 6-ом уроке
fun shortestPathOnField(inputName: String): Int { //T = O(N * M) R = (2 * N * M)
    val input = File(inputName).readLines()
            .map { it -> it.split(' ').map { it.toInt() }.toIntArray() }
            .toTypedArray() //дано поле (N, M)
    val m = input.size - 1
    val n = input[0].size - 1
    val summap = Array(m + 1) { IntArray(n + 1) { 0 } } //такая карта, в которой каждая клетка
    // равна сумме минимальных пройденных путей
    var buf = 0

    for (i in 0..n){
        buf += input[0][i]
        summap[0][i] = buf
    }

    buf = 0
    for (j in 0..m){
        buf += input[j][0]
        summap[j][0] = buf
    }
    //by this moment
/* input
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
*/
/* temp
 * 0 2 5 7 11 12
 * 1 5 3 4 6  2
 * 3 6 2 5 1  3
 * 4 4 3 2 6  2
 * 8 2 3 1 5  0
*/
    for (i in 1..m)
        for (j in 1..n)
            summap[i][j] = input[i][j] + minOf(summap[i - 1][j - 1], summap[i - 1][j], summap[i][j - 1])

    return summap[m][n]
}

// Задачу "Максимальное независимое множество вершин в графе без циклов"
// смотрите в уроке 5